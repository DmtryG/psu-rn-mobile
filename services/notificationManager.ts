import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';
import { ActiveNotification, MarkerData } from '../types';
import { formatDistance, DISTANCE_CONSTANTS } from '../utils/distance';

// –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
Notifications.setNotificationHandler({
    handleNotification: async () => ({
        shouldShowBanner: true,
        shouldPlaySound: true,
        shouldSetBadge: true,
    }),
});

export class NotificationManager {
    private activeNotifications: Map<string, ActiveNotification>;
    private isInitialized: boolean = false;

    constructor() {
        this.activeNotifications = new Map();
    }

    // –∏–Ω—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async initialize(): Promise<boolean> {
        try {
            if (this.isInitialized) {
                return true;
            }

            // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            const { status: existingStatus } = await Notifications.getPermissionsAsync();
            let finalStatus = existingStatus;

            if (existingStatus !== "granted") {
                const {status} = await Notifications.requestPermissionsAsync();
                finalStatus = status;
            }

            if (finalStatus !== "granted") {
                console.warn("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ");
                return false;
            }

            // –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –∞–Ω–¥—Ä–æ–π–¥–∞

            this.isInitialized = true;
            console.log("NotificationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return true;
        } catch (error) {
            console.error ("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ NotificationManager");
            return false;
        }
    }

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –º–∞—Ä–∫–µ—Ä—É
    async showProximityNotification(
        marker: MarkerData,
        distance: number
    ): Promise<void> {
        try {
            if (!this.isInitialized) {
                const initialized = await this.initialize();
                if (!initialized) {
                    return;
                }
            }

            // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
            if (this.activeNotifications.has(marker.id)) {
                const existing = this.activeNotifications.get(marker.id)!;

                // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –∫—É–ª–¥–∞—É–Ω–∞
                const timeSinceLastNotification = Date.now() - existing.timestamp;
                if (timeSinceLastNotification < DISTANCE_CONSTANTS.DEFAULT_COOLDOWN_PERIOD) {
                    return; // —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                }

                // —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await this.removeNotification(marker.id);
            }

            const notificationId = await Notifications.scheduleNotificationAsync({
                content: {
                    title: "üß≠ –í—ã —Ä—è–¥–æ–º —Å –º–∞—Ä–∫–µ—Ä–æ–º!",
                    body: `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ ${formatDistance(distance)} –æ—Ç "${marker.title || '–º–∞—Ä–∫–µ—Ä–∞'}"`,
                    data: {
                        markerId: marker.id,
                        distance: distance,
                        type: "proximity"
                    },
                    sound: "default",
                },
                trigger: null, // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
                ...(Platform.OS === 'android' && {
                    identifier: `proximity_${marker.id}`,
                }),
            });

            // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            this.activeNotifications.set(marker.id, {
                markerId: marker.id,
                notificationId,
                timestamp: Date.now(),
                distance: distance,
            });

            console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ ${marker.id} (${formatDistance(distance)})`);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
        }
    }

    // —É–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    async removeNotification(markerId: string): Promise<void> {
        try {
            const notification = this.activeNotifications.get(markerId);
            if (notification) {
                await Notifications.cancelScheduledNotificationAsync(notification.notificationId);
                this.activeNotifications.delete(markerId);
                console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ ${markerId}`);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ", error);
        }
    }

    // —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async clearAllNotifications(): Promise<void> {
        try {
            await Notifications.cancelAllScheduledNotificationsAsync();
            this.activeNotifications.clear();
            console.log("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ", error);
        }
    }
    
    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    getActiveNotifications(): ActiveNotification[] {
        return Array.from(this.activeNotifications.values());
    }

    // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
    hasActiveNotification(markerId: string): boolean {
        return this.activeNotifications.has(markerId);
    }

    // —Ç–µ—Å—Ç
    async sendTestNotification(): Promise<void> {
        try {
            if (!this.isInitialized) {
                const initialized = await this.initialize();
                if (!initialized) {
                    console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
                    return;
                }
            }

            await Notifications.scheduleNotificationAsync({
                content: {
                    title: "–¢–µ—Å—Ç",
                    body: "Body —Ç–µ—Å—Ç",
                    data: { type: "test" },
                },
                trigger: null,
            });

            console.log("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ", error);
        }
    }

    // –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    async getPermissionsStatus(): Promise<string> {
        try {
            const {status} = await Notifications.getPermissionsAsync();
            return status;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:", error);
            return "undetermined";
        }
    }

    // –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    setupNotificationListeners() {
        // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notificationListener = Notifications.addNotificationReceivedListener(notification => {
            console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:", notification);
        });

        const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
            console.log ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º: ", response);

            const data = response.notification.request.content.data;
            if (data?.type === 'proximity' && data?.markerId) {
                console.log("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –º–∞—Ä–∫–µ—Ä—É: ", data.markerId);
            }
        });

        return {
            notificationListener,
            responseListener,
            remove: () => {
                notificationListener.remove();
                responseListener.remove();
            }
        };
    }

    // –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    async cleanup(): Promise<void> {
        try {
            await this.clearAllNotifications();
            this.activeNotifications.clear();
            this.isInitialized = false;
            console.log("NotificationManager –æ—á–∏—â–µ–Ω");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ NotificationManager:", error);
        }
    }
}

// —Å–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const notificationManager = new NotificationManager();